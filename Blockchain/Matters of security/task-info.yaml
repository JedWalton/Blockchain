type: edu
custom_name: stage5
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/blockchain/BlockchainTest.java
  visible: true
  text: "package blockchain;\n\nimport junit.framework.TestCase;\n\npublic class BlockchainTest\
    \ extends TestCase {\n\n    \n\n}"
  learner_created: false
- name: test/blockchain/MainTest.java
  visible: true
  text: |-
    package blockchain;

    import junit.framework.TestCase;

    public class MainTest extends TestCase {

    }
  learner_created: false
- name: src/blockchain/StringUtil.java
  visible: true
  text: |-
    package blockchain;

    import java.security.MessageDigest;

    class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/SerializationUtil.java
  visible: true
  text: |-
    package blockchain;

    import java.io.*;

    class SerializationUtils {
        /**
         * Serialize the given object to the file
         */
        public static void serialize(Object obj, String fileName) throws IOException {

            BufferedOutputStream bos;
            FileOutputStream fos = new FileOutputStream(fileName);
            bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = null;
            oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();

        }

        /**
         * Deserialize to an object from the file
         */
        public static Object deserialize(String fileName) throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: true
- name: src/blockchain/BlockChainFactory.java
  visible: true
  text: |-
    package blockchain;

    import java.util.ArrayList;
    import java.util.HashSet;
    import java.util.Set;
    import java.util.concurrent.Callable;
    import java.util.concurrent.ExecutionException;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    class BlockChainFactory {
        private static BlockChainFactory instance = new BlockChainFactory();
        int threads = Runtime.getRuntime().availableProcessors();

        private BlockChainFactory() {
        }

        public static BlockChainFactory getInstance() {
            return instance;
        }

        void setThreads(int threads) {
            int numThreads = Runtime.getRuntime().availableProcessors();
            this.threads = Math.min(threads, numThreads);
        }

        BlockChain generateChainSizeOf(int chainSize, int zeroesInHash) throws ExecutionException, InterruptedException {

            BlockChain blockChain = new BlockChain(zeroesInHash);

            extend(blockChain, chainSize);
            return blockChain;
        }

        void extend(BlockChain blockChain, int blocksNum) throws ExecutionException, InterruptedException {
            for (int i = 0; i < blocksNum; i++) {
                extendByOneBlock(blockChain);
            }
        }

        void extendByOneBlock(BlockChain blockChain) throws ExecutionException, InterruptedException {
            Stopwatch.reset();
            Set<Callable<Block>> miners = new HashSet<>();
            ExecutorService executorService = Executors.newFixedThreadPool(threads);
            ArrayList<String> messagesCache = new ArrayList<>(blockChain.Messages);
            blockChain.Messages.removeAll(messagesCache);
            String BlockData = String.join("\n", messagesCache);

            for (int i = 1; i <= threads; i++) {
                BlockMiner miner = new BlockMiner(blockChain);
                miner.setId(i);
                miner.BlockData = BlockData;
                miners.add(miner);
            }
            Block result = executorService.invokeAny(miners);
            result.printInfo();
            blockChain.add(result);
            executorService.shutdownNow();
        }
    }
  learner_created: true
- name: Database.txt
  visible: true
  text: "��\0\x05sr\0\x15blockchain.Blockchain3l`���<\x15\x02\0\x02I\0\x06zeroesL\0\
    \x06blockst\0\x10Ljava/util/List;xp\0\0\0\x02sr\0\x13java.util.ArrayListx��\x1d\
    ��a�\x03\0\x01I\0\x04sizexp\0\0\0\x05w\x04\0\0\0\x05sr\0\x10blockchain.Block\x18\
    \ �\x11��zB\x02\0\x06I\0\x02idJ\0\vmagicNumberI\0\x0etimeToGenerateJ\0\ttimestampL\0\
    \tblockHasht\0\x12Ljava/lang/String;L\0\nprevBlockHashq\0~\0\x06xp\0\0\0\0�#�\n\
    T�Y�\0\0\0\0\0\0\x01~���\0t\0@008c253efae727b907550a0fb492ddf4e7cbb2edf5d5da940ae3ac73c3838d75t\0\
    \x010sq\0~\0\x05\0\0\0\x01\nb0l�\x7f\x03�\0\0\0\0\0\0\x01~���\x04t\0@00f89bacdd1f291776e6445d522e3b94884b3c80b52093921b2282e0606ae0aeq\0\
    ~\0\bsq\0~\0\x05\0\0\0\x02$o�lQ\f\a_\0\0\0\0\0\0\x01~���\x05t\0@00978548c030cc8e2cd0a0b4b5f53a9eb71b9592e4c76a8441d2679ead42a285q\0\
    ~\0\vsq\0~\0\x05\0\0\0\x03g�$�LO?b\0\0\0\0\0\0\x01~���\x06t\0@0010956cd10d5c80aba32a01cbb7b6c5b7959be68fbc26f9d2d25acd74e1e941q\0\
    ~\0\nsq\0~\0\x05\0\0\0\x04?��\x1e��\x02�\0\0\0\0\0\0\x01~���\x06t\0@006dbdd9cf846589814160455a7161427e6b070e2f1c914cdff300662c20aeb4q\0\
    ~\0\x0fx"
  learner_created: true
- name: src/blockchain/ChatEmulator.java
  visible: true
  text: |-
    package blockchain;

    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    class ChatEmulator {
        private static ChatEmulator instance = new ChatEmulator();
        List<String> botNames = List.of("Kate", "Tom", "Nick", "Alex", "John");
        int threads = 4;
        Set<MessageBot> bots;
        ExecutorService executorService;

        public static ChatEmulator getInstance() {
            return instance;
        }

        void haveChatAt(BlockChain blockChain) {
            bots = new HashSet<>();
            executorService = Executors.newFixedThreadPool(threads);
            botNames.forEach(bot -> bots.add(new MessageBot(bot, blockChain)));
            bots.forEach(executorService::submit);

        }

        private ChatEmulator() {
        }

        void stop() {
            bots.forEach(MessageBot::stop);
            executorService.shutdown();
        }
    }
  learner_created: true
- name: src/blockchain/BlockMiner.java
  visible: true
  text: |-
    package blockchain;

    import java.util.Random;
    import java.util.concurrent.Callable;

    import static java.lang.Thread.currentThread;

    class BlockMiner implements Callable<Block> {
        BlockChain blockChain;
        int id;
        String BlockData;

        BlockMiner(BlockChain blockChain) {
            this.blockChain = blockChain;
        }


        public void setId(int id) {
            this.id = id;
        }

        public Block call() {
            return generateNextBlock();
        }

        Block generateNextBlock() {
            int chainSize = blockChain.size();
            String previousBlockHash;
            if (chainSize == 0) {
                previousBlockHash = "0";
            } else {
                Block previousBlock = blockChain.getLastBlock();
                previousBlockHash = previousBlock.generateHash();
            }
            int blockId = chainSize + 1;
            Block nextBlock = new Block(previousBlockHash, blockId, BlockData);
            nextBlock.minerId = id;
            nextBlock.magicNumber = findMagicNumberFor(nextBlock);
            return nextBlock;
        }

        int findMagicNumberFor(Block block) {
            Random random = new Random(Integer.MAX_VALUE);
            String validHashRegex = String.format("0{%d}\\w*", blockChain.getZeroesInHash());
            int magicNumber;
            String hash;
            do {
                magicNumber = random.nextInt();
                hash = block.generateHashUsing(magicNumber);
            }
            while (!hash.matches(validHashRegex) & !currentThread().isInterrupted());
            return magicNumber;
        }
    }
  learner_created: true
- name: src/blockchain/MessageBot.java
  visible: true
  text: |-
    package blockchain;

    import java.util.Date;
    import java.util.Random;

    class MessageBot implements Runnable {
        String name;
        BlockChain blockChain;
        int maxSleepDuration = 150;
        boolean isStopped = false;

        public MessageBot(String name, BlockChain blockChain) {
            this.name = name;
            this.blockChain = blockChain;
        }


        void SendRandomMessage() {
            blockChain.addMessage(name, generateRandomMessage());
        }

        String generateRandomMessage() {

            int leftLimit = 97; // letter 'a'
            int rightLimit = 122; // letter 'z'
            int targetStringLength = 10;
            Random random = new Random();
            StringBuilder buffer = new StringBuilder(targetStringLength);
            for (int i = 0; i < targetStringLength; i++) {
                int randomLimitedInt = leftLimit + (int)
                        (random.nextFloat() * (rightLimit - leftLimit + 1));
                buffer.append((char) randomLimitedInt);
            }
            return buffer.toString() + " " + new Date().getTime();
        }

        void stop() {
            isStopped = true;
        }

        @Override
        public void run() {
            long sleepTimer = new Random().nextInt(maxSleepDuration);

            while (!isStopped) {
                SendRandomMessage();
                try {
                    Thread.sleep(sleepTimer);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |-
    package blockchain;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Date;
    import java.util.List;

    class BlockChain implements Serializable {
        private static final long serialVersionUID = 9L;
        ArrayList<Block> blocks = new ArrayList<>();
        private int zeroesInHash;
        List<String> Messages =
                Collections.synchronizedList(new ArrayList<>());

        synchronized void addMessage(String author, String message) {
            Messages.add(author + ": " + message);
        }

        public int getZeroesInHash() {
            return zeroesInHash;
        }

        public int size() {
            return blocks.size();
        }

        BlockChain(int zeroesInHash) {
            this.zeroesInHash = zeroesInHash;
        }


        Block getBlockBy(int id) {
            return blocks.get(id - 1);
        }

        Block getLastBlock() {
            return (size() > 0) ? blocks.get(size() - 1) : null;
        }

        void add(Block block) {
            if (canAdd(block)) {
                blocks.add(block);
                adjustZeroesInHash();
            }
        }

        void adjustZeroesInHash() {
            long elapsedTime = Stopwatch.getElapsedSeconds();
            printGenerationTimeMsg(elapsedTime);
            if (elapsedTime > 60) {
                zeroesInHash -= 1;
                System.out.printf("N was decreased to %d\n\n", zeroesInHash);
            } else if (elapsedTime < 10) {
                zeroesInHash += 1;
                System.out.printf("N was increased to %d\n\n", zeroesInHash);
            } else
                System.out.println("N stays the same\n\n");
        }

        private static void printGenerationTimeMsg(long sec) {
            System.out.printf("Block was generating for %d seconds\n", sec);
        }

        boolean canAdd(Block block) {
            return block.hasValid(zeroesInHash) & canHaveValid(block);
        }


        boolean canHaveValid(Block block) {
            int id = block.id;
            boolean isValid = true;
            if (id > 1) {
                String previousHash = block.previousHash;
                Block previousBlock = getBlockBy(id - 1);
                String hash = previousBlock.generateHash();
                if (!hash.equals(previousHash)) {
                    isValid = false;
                }
            }
            return isValid;
        }


        boolean isValid() {
            boolean chainIsValid = true;
            for (Block block : blocks) {
                if (!canHaveValid(block)) {
                    chainIsValid = false;
                    break;
                }
            }
            return chainIsValid;
        }

        void printAllBlock() {
            for (Block block : blocks
            ) {
                block.printInfo();
                System.out.println();
            }
        }

    }

    class Block implements Serializable {
        private static final long serialVersionUID = 8L;
        String previousHash;
        long timesStamp = new Date().getTime();
        int id;
        int magicNumber;
        int minerId;
        String blockData;

        Block(String hash, int id, String blockData) {
            this.previousHash = hash;
            this.id = id;
            this.blockData = blockData;
        }

        void printInfo() {

            StringBuilder output = new StringBuilder("Block:" +
                    "\nCreated by miner # " + minerId +
                    "\nId: " + id +
                    "\nTimestamp: " + timesStamp +
                    "\nMagic number: " + magicNumber +
                    "\nHash of the previous block:\n" + previousHash +
                    "\nHash of the block:\n" + generateHash() +
                    "\nBlock data:");

            if (blockData.isEmpty()) {
                output.append("no messages");
            } else {
                output.append("\n").append(blockData);
            }

            System.out.println(output);

        }

        boolean hasValid(int zeroesInHash) {
            String validHashRegex = "0{" + zeroesInHash + "}\\w*";
            String hash = generateHash();
            return hash.matches(validHashRegex);
        }

        String generateHash() {
            return StringUtil.applySha256(previousHash + id + minerId + timesStamp + magicNumber + blockData);
        }

        String generateHashUsing(int magicNumber) {
            return StringUtil.applySha256(previousHash + id + minerId + timesStamp + magicNumber + blockData);
        }
    }
  learner_created: true
- name: src/blockchain/Stopwatch.java
  visible: true
  text: |-
    package blockchain;

    import java.util.concurrent.TimeUnit;

    class Stopwatch {
        static private long start;

        static void reset() {
            start = System.nanoTime();
        }

        static long getElapsedSeconds() {

            long end = System.nanoTime();
            long elapsedNano = end - start;
            long elapsedSeconds = TimeUnit.SECONDS.convert(elapsedNano, TimeUnit.NANOSECONDS);
            return elapsedSeconds;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5417#comment
status: Unchecked
record: -1
