type: edu
custom_name: stage6
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/blockchain/MainTest.java
  visible: true
  text: |-
    package blockchain;

    import junit.framework.TestCase;

    public class MainTest extends TestCase {

    }
  learner_created: false
- name: test/blockchain/BlockchainTest.java
  visible: true
  text: "package blockchain;\n\nimport junit.framework.TestCase;\n\npublic class BlockchainTest\
    \ extends TestCase {\n\n    \n\n}"
  learner_created: false
- name: Database.txt
  visible: true
  text: "��\0\x05sr\0\x15blockchain.Blockchain3l`���<\x15\x02\0\x02I\0\x06zeroesL\0\
    \x06blockst\0\x10Ljava/util/List;xp\0\0\0\x02sr\0\x13java.util.ArrayListx��\x1d\
    ��a�\x03\0\x01I\0\x04sizexp\0\0\0\x05w\x04\0\0\0\x05sr\0\x10blockchain.Block\x18\
    \ �\x11��zB\x02\0\x06I\0\x02idJ\0\vmagicNumberI\0\x0etimeToGenerateJ\0\ttimestampL\0\
    \tblockHasht\0\x12Ljava/lang/String;L\0\nprevBlockHashq\0~\0\x06xp\0\0\0\0�#�\n\
    T�Y�\0\0\0\0\0\0\x01~���\0t\0@008c253efae727b907550a0fb492ddf4e7cbb2edf5d5da940ae3ac73c3838d75t\0\
    \x010sq\0~\0\x05\0\0\0\x01\nb0l�\x7f\x03�\0\0\0\0\0\0\x01~���\x04t\0@00f89bacdd1f291776e6445d522e3b94884b3c80b52093921b2282e0606ae0aeq\0\
    ~\0\bsq\0~\0\x05\0\0\0\x02$o�lQ\f\a_\0\0\0\0\0\0\x01~���\x05t\0@00978548c030cc8e2cd0a0b4b5f53a9eb71b9592e4c76a8441d2679ead42a285q\0\
    ~\0\vsq\0~\0\x05\0\0\0\x03g�$�LO?b\0\0\0\0\0\0\x01~���\x06t\0@0010956cd10d5c80aba32a01cbb7b6c5b7959be68fbc26f9d2d25acd74e1e941q\0\
    ~\0\nsq\0~\0\x05\0\0\0\x04?��\x1e��\x02�\0\0\0\0\0\0\x01~���\x06t\0@006dbdd9cf846589814160455a7161427e6b070e2f1c914cdff300662c20aeb4q\0\
    ~\0\x0fx"
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  learner_created: true
- name: src/blockchain/StringUtil.java
  visible: true
  learner_created: true
- name: src/blockchain/Message.java
  visible: true
  learner_created: true
- name: src/blockchain/SignatureChecker.java
  visible: true
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  learner_created: true
- name: src/blockchain/SerializationUtils.java
  visible: true
  learner_created: true
- name: src/blockchain/BotUser.java
  visible: true
  learner_created: true
- name: src/blockchain/BlockchainValidator.java
  visible: true
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  learner_created: true
- name: src/blockchain/HashCreator.java
  visible: true
  learner_created: true
- name: src/blockchain/KeyPairCreator.java
  visible: true
  learner_created: true
- name: src/blockchain/MessageSender.java
  visible: true
  learner_created: true
- name: src/blockchain/BlockchainManager.java
  visible: true
  learner_created: true
- name: src/blockchain/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5418#comment
status: Failed
record: 6
